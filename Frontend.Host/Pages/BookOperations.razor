@page "/BookOperations"
@using Frontend.Host.Models
@using Frontend.Host.Services
@inject StateContainer StateContainer
@inject NavigationManager NavigationManager
@inject IBookService BookService

<h1>Book Operations</h1>

<p>Book to edit, delete and create.</p>

<div class="book-section">
    <div class="book-form">
        <h2>Book to Edit</h2>
        @if (_bookToEdit != null)
        {
            <EditForm Model="@_bookToEdit" OnValidSubmit="HandleOperations">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>Title</label>
                    <InputText class="form-control" @bind-Value="_bookToEdit.Title"/>
                    <ValidationMessage For="@(() => _bookToEdit.Title)" />
                </div>

                <div class="form-group">
                    <label>Author</label>
                    <InputText class="form-control" @bind-Value="@_bookToEdit.Author" disabled/>
                </div>

                <div class="form-group">
                    <label>Release Date</label>
                    <InputDate class="form-control" @bind-Value="@_bookToEdit.ReleaseDate" disabled/>
                </div>
            </EditForm>
        }
        else
        {
            <p>No book selected to edit.</p>
        }
    </div>

    <div class="book-form">
        <h2>Book to Delete</h2>
        @if (_bookToDelete != null)
        {
            <EditForm Model="@_bookToDelete" OnValidSubmit="HandleOperations">
                <div class="form-group">
                    <label>Title</label>
                    <InputText class="form-control" @bind-Value="_bookToDelete.Title" disabled/>
                </div>

                <div class="form-group">
                    <label>Author</label>
                    <InputText class="form-control" @bind-Value="@_bookToDelete.Author" disabled/>
                </div>

                <div class="form-group">
                    <label for="bookReleaseDate">Release Date</label>
                    <InputDate id="bookReleaseDate" class="form-control" @bind-Value="@_bookToDelete.ReleaseDate" disabled/>
                </div>
            </EditForm>
        }
        else
        {
            <p>No book selected to delete.</p>
        }
    </div>

    <div class="book-form">
        <EditForm Model="@_bookToCreate" OnValidSubmit="HandleOperations">
            <DataAnnotationsValidator />
            <h2>Book to Create</h2>
            <div class="form-group">
                <label>Title</label>
                <InputText class="form-control" @bind-Value="_bookToCreate.Title"/>
                <ValidationMessage For="@(() => _bookToCreate.Title)" />
            </div>

            <div class="form-group">
                <label>Author</label>
                <InputText class="form-control" @bind-Value="@_bookToCreate.Author"/>
                <ValidationMessage For="@(() => _bookToCreate.Author)" />
            </div>

            <div class="form-group">
                <label for="bookReleaseDate">Release Date</label>
                <InputDate class="form-control" @bind-Value="@_bookToCreate.ReleaseDate"/>
            </div>
            <button type="submit" class="btn btn-primary" disabled="@_submitted">Save</button>
        </EditForm>
    </div>
</div>

@if (!string.IsNullOrEmpty(_updateFeedbackMessage))
{
    <div class="alert alert-info mt-4">
        @_updateFeedbackMessage
    </div>
}

@if (!string.IsNullOrEmpty(_createFeedbackMessage))
{
    <div class="alert alert-info mt-4">
        @_createFeedbackMessage
    </div>
}

@if (!string.IsNullOrEmpty(_deleteFeedbackMessage))
{
    <div class="alert alert-info mt-4">
        @_deleteFeedbackMessage
    </div>
}

@code {
    private Book? _bookToEdit;
    private Book? _bookToDelete;
    private Book? _bookToCreate;

    private string? _updateFeedbackMessage;
    private string? _createFeedbackMessage;
    private string? _deleteFeedbackMessage;

    private bool _submitted = false;

    
    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        var bookToEditId = query["bookToEdit"];
        var bookToDeleteId = query["bookToDelete"];
        
        var allBooks = StateContainer.GetBooks();

        _bookToEdit = GetBook(bookToEditId);
        _bookToDelete = GetBook(bookToDeleteId);

        _bookToCreate = new Book(Guid.Empty, string.Empty, string.Empty, DateOnly.FromDateTime(DateTime.UtcNow));
        
        return;

        Book? GetBook(string? id)
        {
            return Guid.TryParse(id, out var guid) ? allBooks.FirstOrDefault(x => x.Id == guid) : null;
        }
    }
    
    private async Task HandleOperations()
    {
        _submitted = true;
        
        var (isUpdated, isCreated, isDeleted) = await BookService.SendBatch(
            bookToCreate: _bookToCreate, 
            bookToUpdate: _bookToEdit,
            bookToDelete: _bookToDelete
        );
        
        _updateFeedbackMessage = isUpdated ? "Book was successfully updated." : "Failed updating book.";
        _createFeedbackMessage = isCreated ? "Book was successfully created." : "Failed creating book.";
        _deleteFeedbackMessage = isDeleted ? "Book was successfully deleted." : "Failed deleting book.";
    }
}

<style>
    .book-section {
        display: flex;
        justify-content: space-between;
        gap: 20px;
    }

    .book-form {
        display: flex;
        flex-direction: column;
        width: 30%;
    }

    .form-group {
        margin-bottom: 10px;
    }
    
</style>